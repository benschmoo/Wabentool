//==============================================================================
//  WARNING!!  This file is overwritten by the Block UI Styler while generating
//  the automation code. Any modifications to this file will be lost after
//  generating the code again.
//
//       Filename:  C:\Users\bened\Desktop\Studium AFE\Semester I\Projektarbeit I\Dateien\Ernst\Wabenstrukturtool.cs
//
//        This file was generated by the NX Block UI Styler
//        Created by: benschmoo
//              Version: NX 1899
//              Date: 07-22-2020  (Format: mm-dd-yyyy)
//              Time: 12:08 (Format: hh-mm)
//
//==============================================================================

//==============================================================================
//  Purpose:  This TEMPLATE file contains C# source to guide you in the
//  construction of your Block application dialog. The generation of your
//  dialog file (.dlx extension) is the first step towards dialog construction
//  within NX.  You must now create a NX Open application that
//  utilizes this file (.dlx).
//
//  The information in this file provides you with the following:
//
//  1.  Help on how to load and display your Block UI Styler dialog in NX
//      using APIs provided in NXOpen.BlockStyler namespace
//  2.  The empty callback methods (stubs) associated with your dialog items
//      have also been placed in this file. These empty methods have been
//      created simply to start you along with your coding requirements.
//      The method name, argument list and possible return values have already
//      been provided for you.
//==============================================================================

//------------------------------------------------------------------------------
//These imports are needed for the following template code
//------------------------------------------------------------------------------
using System;
using NXOpen;
using NXOpen.BlockStyler;
using NXOpen.Features;
using NXOpen.GeometricAnalysis;
using NXOpen.UF;
using NXOpen.Utilities;

//------------------------------------------------------------------------------
//Represents Block Styler application class
//------------------------------------------------------------------------------
public class Wabenstrukturtool
{
    //class members
    private static Session theSession = null;
    private static UI theUI = null;
    private string theDlxFileName;
    private NXOpen.BlockStyler.BlockDialog theDialog;
    private NXOpen.BlockStyler.Group group0;// Block type: Group
    private NXOpen.BlockStyler.FaceCollector face_select0;// Block type: Face Collector
    private NXOpen.BlockStyler.SpecifyVector vector0;// Block type: Specify Vector
    private NXOpen.BlockStyler.IntegerBlock integer0;// Block type: Integer
    private NXOpen.BlockStyler.IntegerBlock integer01;// Block type: Integer
    private NXOpen.BlockStyler.IntegerBlock integer02;// Block type: Integer
    private NXOpen.BlockStyler.Toggle toggle0;// Block type: Toggle

    //------------------------------------------------------------------------------
    //Bit Option for Property: EntityType
    //------------------------------------------------------------------------------
    public static readonly int EntityType_AllowFaces = (1 << 4);
    public static readonly int EntityType_AllowDatums = (1 << 5);
    public static readonly int EntityType_AllowBodies = (1 << 6);
    //------------------------------------------------------------------------------
    //Bit Option for Property: FaceRules
    //------------------------------------------------------------------------------
    public static readonly int FaceRules_SingleFace = (1 << 0);
    public static readonly int FaceRules_RegionFaces = (1 << 1);
    public static readonly int FaceRules_TangentFaces = (1 << 2);
    public static readonly int FaceRules_TangentRegionFaces = (1 << 3);
    public static readonly int FaceRules_BodyFaces = (1 << 4);
    public static readonly int FaceRules_FeatureFaces = (1 << 5);
    public static readonly int FaceRules_AdjacentFaces = (1 << 6);
    public static readonly int FaceRules_ConnectedBlendFaces = (1 << 7);
    public static readonly int FaceRules_AllBlendFaces = (1 << 8);
    public static readonly int FaceRules_RibFaces = (1 << 9);
    public static readonly int FaceRules_SlotFaces = (1 << 10);
    public static readonly int FaceRules_BossandPocketFaces = (1 << 11);
    public static readonly int FaceRules_MergedRibFaces = (1 << 12);
    public static readonly int FaceRules_RegionBoundaryFaces = (1 << 13);
    public static readonly int FaceRules_FaceandAdjacentFaces = (1 << 14);
    //------------------------------------------------------------------------------
    //Bit Option for Property: SnapPointTypesOnByDefault
    //------------------------------------------------------------------------------
    public static readonly int SnapPointTypesOnByDefault_UserDefined = (1 << 0);
    public static readonly int SnapPointTypesOnByDefault_Inferred = (1 << 1);
    public static readonly int SnapPointTypesOnByDefault_ScreenPosition = (1 << 2);
    public static readonly int SnapPointTypesOnByDefault_EndPoint = (1 << 3);
    public static readonly int SnapPointTypesOnByDefault_MidPoint = (1 << 4);
    public static readonly int SnapPointTypesOnByDefault_ControlPoint = (1 << 5);
    public static readonly int SnapPointTypesOnByDefault_Intersection = (1 << 6);
    public static readonly int SnapPointTypesOnByDefault_ArcCenter = (1 << 7);
    public static readonly int SnapPointTypesOnByDefault_QuadrantPoint = (1 << 8);
    public static readonly int SnapPointTypesOnByDefault_ExistingPoint = (1 << 9);
    public static readonly int SnapPointTypesOnByDefault_PointonCurve = (1 << 10);
    public static readonly int SnapPointTypesOnByDefault_PointonSurface = (1 << 11);
    public static readonly int SnapPointTypesOnByDefault_PointConstructor = (1 << 12);
    public static readonly int SnapPointTypesOnByDefault_TwocurveIntersection = (1 << 13);
    public static readonly int SnapPointTypesOnByDefault_TangentPoint = (1 << 14);
    public static readonly int SnapPointTypesOnByDefault_Poles = (1 << 15);
    public static readonly int SnapPointTypesOnByDefault_BoundedGridPoint = (1 << 16);
    public static readonly int SnapPointTypesOnByDefault_FacetVertexPoint = (1 << 17);
    public static readonly int SnapPointTypesOnByDefault_DefiningPoint = (1 << 18);


    //------------------------------------------------------------------------------
    //Constructor for NX Styler class
    //------------------------------------------------------------------------------
    public Wabenstrukturtool()
    {
        try
        {
            theSession = Session.GetSession();
            theUI = UI.GetUI();
            theDlxFileName = "Wabenstrukturtool.dlx";
            theDialog = theUI.CreateDialog(theDlxFileName);
            theDialog.AddApplyHandler(new NXOpen.BlockStyler.BlockDialog.Apply(apply_cb));
            theDialog.AddOkHandler(new NXOpen.BlockStyler.BlockDialog.Ok(ok_cb));
            theDialog.AddUpdateHandler(new NXOpen.BlockStyler.BlockDialog.Update(update_cb));
            theDialog.AddInitializeHandler(new NXOpen.BlockStyler.BlockDialog.Initialize(initialize_cb));
            theDialog.AddDialogShownHandler(new NXOpen.BlockStyler.BlockDialog.DialogShown(dialogShown_cb));
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            throw ex;
        }
    }
    //------------------------------- DIALOG LAUNCHING ---------------------------------
    //
    //    Before invoking this application one needs to open any part/empty part in NX
    //    because of the behavior of the blocks.
    //
    //    Make sure the dlx file is in one of the following locations:
    //        1.) From where NX session is launched
    //        2.) $UGII_USER_DIR/application
    //        3.) For released applications, using UGII_CUSTOM_DIRECTORY_FILE is highly
    //            recommended. This variable is set to a full directory path to a file 
    //            containing a list of root directories for all custom applications.
    //            e.g., UGII_CUSTOM_DIRECTORY_FILE=$UGII_BASE_DIR\ugii\menus\custom_dirs.dat
    //------------------------------------------------------------------------------
    public static void Main()
    {
        Wabenstrukturtool theWabenstrukturtool = null;
        try
        {
            theWabenstrukturtool = new Wabenstrukturtool();
            // The following method shows the dialog immediately
            theWabenstrukturtool.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        finally
        {
            if (theWabenstrukturtool != null)
                theWabenstrukturtool.Dispose();
            theWabenstrukturtool = null;
        }
    }
    //------------------------------------------------------------------------------
    // This method specifies how a shared image is unloaded from memory
    // within NX. This method gives you the capability to unload an
    // internal NX Open application or user  exit from NX. Specify any
    // one of the three constants as a return value to determine the type
    // of unload to perform:
    //
    //
    //    Immediately : unload the library as soon as the automation program has completed
    //    Explicitly  : unload the library from the "Unload Shared Image" dialog
    //    AtTermination : unload the library when the NX session terminates
    //
    //
    // NOTE:  A program which associates NX Open applications with the menubar
    // MUST NOT use this option since it will UNLOAD your NX Open application image
    // from the menubar.
    //------------------------------------------------------------------------------
    public static int GetUnloadOption(string arg)
    {
        //return System.Convert.ToInt32(Session.LibraryUnloadOption.Explicitly);
        return System.Convert.ToInt32(Session.LibraryUnloadOption.Immediately);
        // return System.Convert.ToInt32(Session.LibraryUnloadOption.AtTermination);
    }

    //------------------------------------------------------------------------------
    // Following method cleanup any housekeeping chores that may be needed.
    // This method is automatically called by NX.
    //------------------------------------------------------------------------------
    public static void UnloadLibrary(string arg)
    {
        try
        {
            //---- Enter your code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //This method shows the dialog on the screen
    //------------------------------------------------------------------------------
    public NXOpen.UIStyler.DialogResponse Show()
    {
        try
        {
            theDialog.Show();
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Method Name: Dispose
    //------------------------------------------------------------------------------
    public void Dispose()
    {
        if (theDialog != null)
        {
            theDialog.Dispose();
            theDialog = null;
        }
    }

    //------------------------------------------------------------------------------
    //---------------------Block UI Styler Callback Functions--------------------------
    //------------------------------------------------------------------------------

    //------------------------------------------------------------------------------
    //Callback Name: initialize_cb
    //------------------------------------------------------------------------------
    public void initialize_cb()
    {
        try
        {
            group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
            face_select0 = (NXOpen.BlockStyler.FaceCollector)theDialog.TopBlock.FindBlock("face_select0");
            vector0 = (NXOpen.BlockStyler.SpecifyVector)theDialog.TopBlock.FindBlock("vector0");
            integer0 = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("integer0");
            integer01 = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("integer01");
            integer02 = (NXOpen.BlockStyler.IntegerBlock)theDialog.TopBlock.FindBlock("integer02");
            toggle0 = (NXOpen.BlockStyler.Toggle)theDialog.TopBlock.FindBlock("toggle0");


        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: dialogShown_cb
    //This callback is executed just before the dialog launch. Thus any value set 
    //here will take precedence and dialog will be launched showing that value. 
    //------------------------------------------------------------------------------
    public void dialogShown_cb()
    {
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
    }

    //------------------------------------------------------------------------------
    //Callback Name: apply_cb
    //------------------------------------------------------------------------------
    public int apply_cb()
    {
        int errorCode = 0;
        try
        {
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Callback Name: update_cb
    //------------------------------------------------------------------------------
    public int update_cb(NXOpen.BlockStyler.UIBlock block)
    {
        try
        {
            if (block == face_select0)
            {
                //---------Enter your code here-----------
            }
            else if (block == vector0)
            {
                //---------Enter your code here-----------
            }
            else if (block == integer0)
            {
                //---------Enter your code here-----------
                string value = integer0.ToString();
            }
            else if (block == integer01)
            {
                //---------Enter your code here-----------
            }
            else if (block == integer02)
            {
                //---------Enter your code here-----------
            }
            else if (block == toggle0)
            {
                //---------Enter your code here-----------
            }
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return 0;
    }

    //------------------------------------------------------------------------------
    //Callback Name: ok_cb
    //------------------------------------------------------------------------------
    public int ok_cb()
    {
        int errorCode = 0;
        try
        {
            NXOpen.Session theSession = NXOpen.Session.GetSession();
            NXOpen.Part workPart = theSession.Parts.Work;
            //NXOpen.Part displayPart = theSession.Parts.Display;
            // ----------------------------------------------
            //  Menü: Einfügen->Skizze
            // ----------------------------------------------

            UFSession ufs = UFSession.GetUFSession();
            NXObject selobj;

            int type;
            int subtype;
            ListingWindow lw = theSession.ListingWindow;
            UI theUI = UI.GetUI();
            int numsel = theUI.SelectionManager.GetNumSelectedObjects();
            theUI.SelectionManager.GetType();
            theUI.SelectionManager.GetSelectedObject(0);

            string radiusPolygon = integer0.Value.ToString();
            string abstandMittelpunkt = integer01.Value.ToString();
            int randAbstandCalc = integer02.Value + integer0.Value;
            string randAbstand = randAbstandCalc.ToString();

       
            if (integer0.Value * 2 >=  integer01.Value)
            {
                string error = "Abstand muss kleiner als Durchmesser sein!";
                theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, error.ToString());
                return 0;
            }
          

            string x = integer0.ToString();
            group0 = (NXOpen.BlockStyler.Group)theDialog.TopBlock.FindBlock("group0");
            face_select0 = (NXOpen.BlockStyler.FaceCollector)theDialog.TopBlock.FindBlock("face_select0");

            string unixTimestamp = Convert.ToString((int)DateTime.Now.Subtract(new DateTime(1970, 1, 1)).TotalSeconds);
            
            lw.Open();
            lw.WriteLine("Selected objects: " + numsel.ToString() + theUI.SelectionManager.GetSelectedTaggedObject(0));

            //for (int inx = 0; inx < numsel - 1; inx++)
            selobj = (NXObject)theUI.SelectionManager.GetSelectedTaggedObject(0);
            ufs.Obj.AskTypeAndSubtype(selobj.Tag, out type, out subtype);

            lw.WriteLine("Object: " + selobj.ToString());
            lw.WriteLine(" Tag: " + selobj.Tag.ToString());
            lw.WriteLine(" Type: " + type.ToString());
            lw.WriteLine(" Subtype: " + subtype.ToString());
            lw.WriteLine("");
            
            //Face objects1 = Type.GetType(theUI.SelectionManager.GetSelectedObject(0));

            // Hier wird face über Tag gefunden
            Face face1 = (Face)NXObjectManager.Get(selobj.Tag);
            lw.WriteLine(face1.ToString());


            //NXOpen.SketchInPlaceBuilder.Equals(face1, face1);
            NXOpen.Sketch nullNXOpen_Sketch = null;
            NXOpen.SketchInPlaceBuilder sketchInPlaceBuilder1;
            sketchInPlaceBuilder1 = workPart.Sketches.CreateSketchInPlaceBuilder2(nullNXOpen_Sketch);

            NXOpen.Point3d origin1 = new NXOpen.Point3d(0.0, 0.0, 0.0);
            NXOpen.Vector3d normal1 = new NXOpen.Vector3d(0.0, 0.0, 1.0);
            NXOpen.Plane plane1;

            //Get Body from Face

            Body body1 = (Body)face1.GetBody();

            NXOpen.Unit unit1 = ((NXOpen.Unit)workPart.UnitCollection.FindObject("MilliMeter"));
            NXOpen.Expression expression1;
            expression1 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1);

            NXOpen.Expression expression2;
            expression2 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1);

            NXOpen.SketchAlongPathBuilder sketchAlongPathBuilder1;
            sketchAlongPathBuilder1 = workPart.Sketches.CreateSketchAlongPathBuilder(nullNXOpen_Sketch);

            // sketchAlongPathBuilder1.PlaneLocation.Expression.SetFormula("0");

            //theSession.SetUndoMarkName(markId3, "Skizze erstellen-Dialogfenster");

            NXOpen.Scalar scalar1 = workPart.Scalars.CreateScalar(1.0, NXOpen.Scalar.DimensionalityType.None, NXOpen.SmartObject.UpdateOption.WithinModeling);
                  
            //Create xform um coordinatensystem auf die Mitte von selected Face zu legen
            Xform xform1 = workPart.Xforms.CreateXform(face1, NXOpen.SmartObject.UpdateOption.WithinModeling);
            CartesianCoordinateSystem System1 = workPart.CoordinateSystems.CreateCoordinateSystem(xform1, NXOpen.SmartObject.UpdateOption.WithinModeling);
            sketchInPlaceBuilder1.Csystem = System1;

            Vector3d xDirectionSys1 = new Vector3d();
            Vector3d yDirectionSys1 = new Vector3d();

            System1.GetDirections(out xDirectionSys1, out yDirectionSys1);
            
            //NXOpen.NXObject[] geom1 = new NXOpen.NXObject[1];
            //geom1[0] = face1;
            //plane1.SetGeometry(geom1);
            //plane1.SetUpdateOption(NXOpen.SmartObject.UpdateOption.WithinModeling);
            NXOpen.Matrix3x3 wcs = workPart.WCS.CoordinateSystem.Orientation.Element;
            Plane test = workPart.Planes.CreateFixedPlane(origin1, wcs);
            sketchInPlaceBuilder1.PlaneReference = test;
            sketchInPlaceBuilder1.PlaneOption = NXOpen.Sketch.PlaneOption.Inferred;
          
            theSession.Preferences.Sketch.CreateInferredConstraints = true;

            theSession.Preferences.Sketch.ContinuousAutoDimensioning = true;

            theSession.Preferences.Sketch.DimensionLabel = NXOpen.Preferences.SketchPreferences.DimensionLabelType.Expression;

            theSession.Preferences.Sketch.TextSizeFixed = true;

            theSession.Preferences.Sketch.FixedTextSize = 3.0;

            theSession.Preferences.Sketch.DisplayParenthesesOnReferenceDimensions = true;

            theSession.Preferences.Sketch.DisplayReferenceGeometry = false;

            theSession.Preferences.Sketch.DisplayShadedRegions = true;

            theSession.Preferences.Sketch.ConstraintSymbolSize = 3.0;

            theSession.Preferences.Sketch.DisplayObjectColor = false;

            theSession.Preferences.Sketch.DisplayObjectName = true;

            theSession.Preferences.Sketch.EditDimensionOnCreation = true;

            NXOpen.NXObject nXObject1;
            nXObject1 = sketchInPlaceBuilder1.Commit();

            NXOpen.Sketch sketch1 = ((NXOpen.Sketch)nXObject1);
            NXOpen.Features.Feature feature1;
            feature1 = sketch1.Feature;

            NXOpen.Session.UndoMarkId markId6;
            markId6 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "update");

            int nErrs1;
            nErrs1 = theSession.UpdateManager.DoUpdate(markId6);

            sketch1.Activate(NXOpen.Sketch.ViewReorient.True);

            //theSession.DeleteUndoMark(markId5, null);

            sketchInPlaceBuilder1.Destroy();

            sketchAlongPathBuilder1.Destroy();

            // 
            //here should be are all try and catches for deleting expressions
            try
            {
                // Ausdruck wird immer noch verwendet.
                workPart.Expressions.Delete(expression2);
            }
            catch (NXException ex)
            {
                ex.AssertErrorCode(1050029);
            }



            try
            {
                // Ausdruck wird immer noch verwendet.
                workPart.Expressions.Delete(expression1);
            }
            catch (NXException ex)
            {
                ex.AssertErrorCode(1050029);
            }
     
            NXOpen.Session.UndoMarkId markId7;
            markId7 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Open Sketch");

            theSession.ActiveSketch.SetName(unixTimestamp);
            Tag objtag = theSession.ActiveSketch.Tag;
            SketchFeature sketchfeature20 = (SketchFeature)theSession.ActiveSketch.Feature;
            lw.WriteLine("Sketchtag: " + objtag.ToString());
            
            NXOpen.Session.UndoMarkId markId8;
            markId8 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Profile short list");

            //Polygon INCOMING

            theSession.DeleteUndoMark(markId8, "Curve");

            NXOpen.Session.UndoMarkId markId9;
            markId9 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Visible, "Start");

            NXOpen.SketchPolygon nullNXOpen_SketchPolygon = null;
            NXOpen.SketchPolygonBuilder sketchPolygonBuilder1;
            sketchPolygonBuilder1 = workPart.Sketches.CreateSketchPolygonBuilder(nullNXOpen_SketchPolygon);

            //Erstellt einen Punkt in der Mitte des neuen Koordinatensystems
            Point systempoint = workPart.Points.CreatePointAtCoordinateSystemOrigin(NXOpen.SmartObject.UpdateOption.WithinModeling, System1);

            sketchPolygonBuilder1.Size = NXOpen.SketchPolygonBuilder.SizeType.CircumscribedRadius;

            sketchPolygonBuilder1.RadiusDimension.SetFormula(radiusPolygon);

            //sketchPolygonBuilder1.LengthDimension.SetFormula("100");

            sketchPolygonBuilder1.RotationDimension.SetFormula("0");

            theSession.SetUndoMarkName(markId9, "Polygon-Dialogfenster");

            NXOpen.Expression expression5;
            expression5 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1);

            sketchPolygonBuilder1.CenterPoint = systempoint;
            lw.WriteLine(systempoint.ToString());

            NXOpen.Expression expression6;
            expression6 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1);

            NXOpen.Session.UndoMarkId markId10;
            markId10 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Polygon");

            sketchPolygonBuilder1.CreateRadiusDimension(true);

            sketchPolygonBuilder1.CreateLengthDimension(false);

            sketchPolygonBuilder1.CreateAngleDimension(true);

            systempoint.RemoveParameters();

            theSession.ActiveSketch.AddGeometry(systempoint, NXOpen.Sketch.InferConstraintsOption.InferNoConstraints);

            /*NXOpen.Sketch.ConstraintGeometry geom1_1 = new NXOpen.Sketch.ConstraintGeometry();
            geom1_1.Geometry = systempoint;
            geom1_1.PointType = NXOpen.Sketch.ConstraintPointType.None;
            geom1_1.SplineDefiningPointIndex = 0;
            NXOpen.Sketch.ConstraintGeometry geom2_1 = new NXOpen.Sketch.ConstraintGeometry();*/

            NXOpen.NXObject nXObject2;
            nXObject2 = sketchPolygonBuilder1.Commit();

            theSession.ActiveSketch.Update();
            Tag objtag2 = theSession.ActiveSketch.Tag;

            theSession.DeleteUndoMark(markId10, null);

            theSession.SetUndoMarkName(markId9, "Polygon");

            theSession.SetUndoMarkVisibility(markId9, null, NXOpen.Session.MarkVisibility.Visible);

            NXOpen.Expression expression7 = sketchPolygonBuilder1.RotationDimension;
            NXOpen.Expression expression8 = sketchPolygonBuilder1.RadiusDimension;
            sketchPolygonBuilder1.Destroy();

            workPart.Expressions.Delete(expression5);

            workPart.Expressions.Delete(expression6);

            NXOpen.Session.UndoMarkId markId11;
            markId11 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Start");

            theSession.UndoToMark(markId11, null);

            theSession.DeleteUndoMark(markId11, null);

            //End Sketch

            theSession.Preferences.Sketch.SectionView = false;

            NXOpen.Session.UndoMarkId markId12;
            markId12 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "Deactivate Sketch");

            theSession.ActiveSketch.Deactivate(NXOpen.Sketch.ViewReorient.True, NXOpen.Sketch.UpdateLevel.Model);

            //theSession.DeleteUndoMarksSetInTaskEnvironment();

            //theSession.EndTaskEnvironment();

            ///
            /// MUSTERN
            /// 
            
            NXOpen.Features.Feature nullNXOpen_Features_Feature = null;
            NXOpen.Features.PatternFeatureBuilder patternFeatureBuilder1;
            patternFeatureBuilder1 = workPart.Features.CreatePatternFeatureBuilder(nullNXOpen_Features_Feature);

            NXOpen.Unit unit11;
            unit11 = patternFeatureBuilder1.PatternService.SpiralDefinition.RadialPitch.Units;

            NXOpen.Expression expression11= workPart.Expressions.CreateSystemExpressionWithUnits("0", unit11);

            NXOpen.Expression expression21 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit11);

            
            plane1 = workPart.Planes.CreatePlane(origin1, normal1, NXOpen.SmartObject.UpdateOption.WithinModeling);

            patternFeatureBuilder1.PatternService.MirrorDefinition.NewPlane = plane1;

            NXOpen.Expression expression3;
            expression3 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit11);

            NXOpen.Expression expression4;
            expression4 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit11);

            NXOpen.Expression expression51 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit11);

            patternFeatureBuilder1.PatternMethod = NXOpen.Features.PatternFeatureBuilder.PatternMethodOptions.Simple;

            patternFeatureBuilder1.CreateReferencePattern = false;

            patternFeatureBuilder1.PatternService.PatternFill.FillOptions = NXOpen.GeometricUtilities.PatternFill.PatternFillOptions.FillbyFace;

            patternFeatureBuilder1.PatternService.PatternFill.FillMargin.SetFormula(randAbstand);

            patternFeatureBuilder1.PatternService.PatternFill.ApplyMarginToInnerBoundToggle = true;

            patternFeatureBuilder1.PatternService.PatternOrientation.CircularOrientationOption = NXOpen.GeometricUtilities.PatternOrientation.Enum.FollowPattern;

            patternFeatureBuilder1.PatternService.PatternOrientation.AlongOrientationOption = NXOpen.GeometricUtilities.PatternOrientation.Enum.NormalToPath;

            patternFeatureBuilder1.PatternService.PatternOrientation.PolygonOrientationOption = NXOpen.GeometricUtilities.PatternOrientation.Enum.FollowPattern;

            patternFeatureBuilder1.PatternService.PatternOrientation.SpiralOrientationOption = NXOpen.GeometricUtilities.PatternOrientation.Enum.FollowPattern;

            patternFeatureBuilder1.PatternService.PatternOrientation.MirrorOrientationOption = NXOpen.GeometricUtilities.PatternOrientation.Enum.FollowPattern;

            patternFeatureBuilder1.PatternService.PatternOrientation.HelixOrientationOption = NXOpen.GeometricUtilities.PatternOrientation.Enum.FollowPattern;

            patternFeatureBuilder1.PatternService.PatternOrientation.AlongPathRotationAngle.SetFormula("0");

            patternFeatureBuilder1.PatternService.RectangularDefinition.XSpacing.SpaceType = NXOpen.GeometricUtilities.PatternSpacing.SpacingType.Pitch;

            patternFeatureBuilder1.PatternService.RectangularDefinition.XSpacing.NCopies.SetFormula("20");

            patternFeatureBuilder1.PatternService.RectangularDefinition.XSpacing.PitchDistance.SetFormula(abstandMittelpunkt);

            patternFeatureBuilder1.PatternService.RectangularDefinition.XSpacing.SpanDistance.SetFormula("285");

            patternFeatureBuilder1.PatternService.RectangularDefinition.XSymmetryToggle = true;

            patternFeatureBuilder1.PatternService.RectangularDefinition.UseYDirectionToggle = true;

            patternFeatureBuilder1.PatternService.RectangularDefinition.YSpacing.SpaceType = NXOpen.GeometricUtilities.PatternSpacing.SpacingType.Pitch;

            patternFeatureBuilder1.PatternService.RectangularDefinition.YSpacing.NCopies.SetFormula("20");

            patternFeatureBuilder1.PatternService.RectangularDefinition.YSpacing.PitchDistance.SetFormula(abstandMittelpunkt);

            patternFeatureBuilder1.PatternService.RectangularDefinition.YSpacing.SpanDistance.SetFormula("285");

            patternFeatureBuilder1.PatternService.RectangularDefinition.YSymmetryToggle = true;

            patternFeatureBuilder1.PatternService.RectangularDefinition.StaggerType = NXOpen.GeometricUtilities.RectangularPattern.StaggerOptions.Row;

            patternFeatureBuilder1.PatternService.RectangularDefinition.HorizontalRef.RotationAngle.SetFormula("60"); ///Here

            patternFeatureBuilder1.PatternService.CircularDefinition.AngularSpacing.NCopies.SetFormula("12");

            patternFeatureBuilder1.PatternService.CircularDefinition.AngularSpacing.PitchDistance.SetFormula("10");

            patternFeatureBuilder1.PatternService.CircularDefinition.AngularSpacing.PitchAngle.SetFormula("10");

            patternFeatureBuilder1.PatternService.CircularDefinition.AngularSpacing.SpanAngle.SetFormula("60");

            patternFeatureBuilder1.PatternService.CircularDefinition.RadialSpacing.NCopies.SetFormula("1");

            patternFeatureBuilder1.PatternService.CircularDefinition.RadialSpacing.PitchDistance.SetFormula("10");

            patternFeatureBuilder1.PatternService.CircularDefinition.RadialSpacing.SpanDistance.SetFormula("100");

            patternFeatureBuilder1.PatternService.CircularDefinition.HorizontalRef.RotationAngle.SetFormula("0");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.XPathOption = NXOpen.GeometricUtilities.AlongPathPattern.PathOptions.Rigid;

            patternFeatureBuilder1.PatternService.AlongPathDefinition.XOnPathSpacing.SpaceType = NXOpen.GeometricUtilities.PatternSpacing.SpacingType.PitchAndSpan;

            patternFeatureBuilder1.PatternService.AlongPathDefinition.XOnPathSpacing.NCopies.SetFormula("13");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.XOnPathSpacing.OnPathPitchDistance.Expression.SetFormula("1");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.XOnPathSpacing.OnPathSpanDistance.IsPercentUsed = false;

            patternFeatureBuilder1.PatternService.AlongPathDefinition.XOnPathSpacing.OnPathSpanDistance.Expression.SetFormula("50");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.XOnPathSpacing.OnPathSpanDistance.Expression.SetFormula("0");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.YDirectionOption = NXOpen.GeometricUtilities.AlongPathPattern.YDirectionOptions.Section;

            patternFeatureBuilder1.PatternService.AlongPathDefinition.YPathOption = NXOpen.GeometricUtilities.AlongPathPattern.PathOptions.Offset;

            patternFeatureBuilder1.PatternService.AlongPathDefinition.YOnPathSpacing.NCopies.SetFormula("1");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.YOnPathSpacing.OnPathPitchDistance.Expression.SetFormula("50");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.YOnPathSpacing.OnPathSpanDistance.Expression.SetFormula("100");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.YSpacing.NCopies.SetFormula("1");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.YSpacing.PitchDistance.SetFormula("10");

            patternFeatureBuilder1.PatternService.AlongPathDefinition.YSpacing.SpanDistance.SetFormula("100");

            patternFeatureBuilder1.PatternService.SpiralDefinition.NumberOfTurns.SetFormula("1");

            patternFeatureBuilder1.PatternService.SpiralDefinition.TotalAngle.SetFormula("360");

            patternFeatureBuilder1.PatternService.SpiralDefinition.RadialPitch.SetFormula("50");

            patternFeatureBuilder1.PatternService.SpiralDefinition.PitchAlongSpiral.NCopies.SetFormula("2");

            patternFeatureBuilder1.PatternService.SpiralDefinition.PitchAlongSpiral.OnPathPitchDistance.Expression.SetFormula("50");

            patternFeatureBuilder1.PatternService.SpiralDefinition.PitchAlongSpiral.OnPathSpanDistance.Expression.SetFormula("100");

            patternFeatureBuilder1.PatternService.SpiralDefinition.HorizontalRef.RotationAngle.SetFormula("0");

            patternFeatureBuilder1.PatternService.PolygonDefinition.PolygonSpacing.NCopies.SetFormula("4");

            patternFeatureBuilder1.PatternService.PolygonDefinition.PolygonSpacing.PitchDistance.SetFormula("25");

            patternFeatureBuilder1.PatternService.PolygonDefinition.PolygonSpacing.SpanAngle.SetFormula("360");

            patternFeatureBuilder1.PatternService.PolygonDefinition.NumberOfSides.SetFormula("6");

            patternFeatureBuilder1.PatternService.PolygonDefinition.RadialSpacing.NCopies.SetFormula("1");

            patternFeatureBuilder1.PatternService.PolygonDefinition.RadialSpacing.PitchDistance.SetFormula("10");

            patternFeatureBuilder1.PatternService.PolygonDefinition.RadialSpacing.SpanDistance.SetFormula("100");

            patternFeatureBuilder1.PatternService.PolygonDefinition.HorizontalRef.RotationAngle.SetFormula("0");

            patternFeatureBuilder1.PatternService.HelixDefinition.CountOfInstances.SetFormula("6");

            patternFeatureBuilder1.PatternService.HelixDefinition.NumberOfTurns.SetFormula("2");

            patternFeatureBuilder1.PatternService.HelixDefinition.AnglePitch.SetFormula("30");

            patternFeatureBuilder1.PatternService.HelixDefinition.DistancePitch.SetFormula("10");

            patternFeatureBuilder1.PatternService.HelixDefinition.HelixPitch.SetFormula("50");

            patternFeatureBuilder1.PatternService.HelixDefinition.HelixSpan.SetFormula("100");

            patternFeatureBuilder1.PatternMethod = NXOpen.Features.PatternFeatureBuilder.PatternMethodOptions.Variational;
            
            //theSession.SetUndoMarkName(markId1, "Formelement mustern-Dialogfenster");
            Vector3d newVec = vector0.Vector;
            NXOpen.Point3d origin2 = new NXOpen.Point3d(0.0, 0.0, 0.0);
            //NXOpen.Vector3d vector1 = new NXOpen.Vector3d(1.0, 0.0, 0.0);
            NXOpen.Direction direction1;
            double sin = Math.Sin(90);
            double cos = Math.Cos(90);
            NXOpen.Matrix3x3 rotMatrixVectorX = new NXOpen.Matrix3x3();
            rotMatrixVectorX.Xx = 0;
            rotMatrixVectorX.Xy = 0;
            rotMatrixVectorX.Xz = 1;
            rotMatrixVectorX.Yx = 0;
            rotMatrixVectorX.Yy = 1;
            rotMatrixVectorX.Yz = 0;
            rotMatrixVectorX.Zx = -1;
            rotMatrixVectorX.Zy = 0;
            rotMatrixVectorX.Zz = 0;

            NXOpen.Matrix3x3 rotMatrixVectorY = new NXOpen.Matrix3x3();
            rotMatrixVectorY.Xx = 1;
            rotMatrixVectorY.Xy = 0;
            rotMatrixVectorY.Xz = 0;
            rotMatrixVectorY.Yx = 0;
            rotMatrixVectorY.Yy = 0;
            rotMatrixVectorY.Yz = -1;
            rotMatrixVectorY.Zx = 0;
            rotMatrixVectorY.Zy = 1;
            rotMatrixVectorY.Zz = 0;

            NXOpen.Vector3d vector1 = theSession.MathUtils.Multiply(rotMatrixVectorX, newVec);
            direction1 = workPart.Directions.CreateDirection(systempoint, xDirectionSys1);
            lw.WriteLine(direction1.ToString());
            lw.WriteLine(vector1.ToString());

            patternFeatureBuilder1.PatternService.RectangularDefinition.HorizontalRef.HorizontalRefVector = direction1;
            
            NXOpen.Expression expression61 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1);
            

            NXOpen.Features.Feature[] objects1 = new NXOpen.Features.Feature[1];
            objects1[0] = sketchfeature20;
            bool added1;
            added1 = patternFeatureBuilder1.FeatureList.Add(objects1);

            NXOpen.Point3d coordinates1 = new NXOpen.Point3d(21.750000000000004, -1.5000000000000002, -10.0);
            NXOpen.Point point1;
            point1 = workPart.Points.CreatePoint(coordinates1);

            patternFeatureBuilder1.ReferencePointService.Point = systempoint;

            patternFeatureBuilder1.PatternService.PatternFill.FaceBoundary.SetAllowedEntityTypes(NXOpen.Section.AllowTypes.OnlyCurves);
            
          
            NXOpen.Face[] facesOfFeatures1 = new NXOpen.Face[1];
            facesOfFeatures1[0] = face1;
            NXOpen.EdgeBoundaryRule edgeBoundaryRule1;
            edgeBoundaryRule1 = workPart.ScRuleFactory.CreateRuleEdgeBoundary(facesOfFeatures1);

            patternFeatureBuilder1.PatternService.PatternFill.FaceBoundary.AllowSelfIntersection(true);
            
            double[] inputArray = new double[3];
            inputArray[0] = systempoint.Coordinates.X;
            inputArray[1] = systempoint.Coordinates.Y;
            inputArray[2] = systempoint.Coordinates.Z;
            lw.WriteLine(systempoint.Coordinates.X.ToString());
            lw.WriteLine(systempoint.Coordinates.Y.ToString());
            lw.WriteLine(systempoint.Coordinates.Z.ToString());

            lw.WriteLine(inputArray.ToString());

            NXOpen.SelectionIntentRule[] rules1 = new NXOpen.SelectionIntentRule[1];
            rules1[0] = edgeBoundaryRule1;
            NXOpen.NXObject nullNXOpen_NXObject = null;
            NXOpen.Point3d helpPoint1 = new Point3d (systempoint.Coordinates.X, systempoint.Coordinates.Y, systempoint.Coordinates.Z);
            patternFeatureBuilder1.PatternService.PatternFill.FaceBoundary.AddToSection(rules1, face1, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint1, NXOpen.Section.Mode.Create, false);

            NXOpen.Expression expression71 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1);

            NXOpen.Point3d origin3 = new NXOpen.Point3d(0.0, 0.0, 0.0);
            NXOpen.Vector3d vector2 = new NXOpen.Vector3d(1.0, 0.0, 0.0);
            NXOpen.Direction direction2;
            //direction2 = workPart.Directions.CreateDirection(systempoint,vector1);
            direction2 = workPart.Directions.CreateDirection(systempoint, xDirectionSys1);

            patternFeatureBuilder1.PatternService.RectangularDefinition.XDirection = direction2;

            NXOpen.Expression expression81 = workPart.Expressions.CreateSystemExpressionWithUnits("0", unit1);
            
            NXOpen.Point3d origin4 = new NXOpen.Point3d(0.0, 0.0, 0.0);
            NXOpen.Vector3d vector4 = new NXOpen.Vector3d(0.0, 1.0, 0.0);

            NXOpen.Vector3d vector3 =  theSession.MathUtils.Multiply(rotMatrixVectorY, newVec);

            NXOpen.Direction direction3;
            direction3 = workPart.Directions.CreateDirection(systempoint, yDirectionSys1);

            patternFeatureBuilder1.PatternService.RectangularDefinition.YDirection = direction3;
            /*
            NXOpen.Point3d scaleAboutPoint1 = new NXOpen.Point3d(-178.89302495281103, -14.145029879989838, 0.0);
            NXOpen.Point3d viewCenter1 = new NXOpen.Point3d(178.89302495281169, 14.145029879989655, 0.0);
            workPart.ModelingViews.WorkView.ZoomAboutPoint(0.80000000000000004, scaleAboutPoint1, viewCenter1);

            NXOpen.Point3d scaleAboutPoint2 = new NXOpen.Point3d(-223.61628119101383, -18.37467116763376, 0.0);
            NXOpen.Point3d viewCenter2 = new NXOpen.Point3d(223.61628119101451, 18.374671167633647, 0.0);
            workPart.ModelingViews.WorkView.ZoomAboutPoint(0.80000000000000004, scaleAboutPoint2, viewCenter2);
            */        
            patternFeatureBuilder1.ParentFeatureInternal = false;

            NXOpen.NXObject nXObject11 = patternFeatureBuilder1.Commit();

            NXOpen.Expression expression9 = patternFeatureBuilder1.PatternService.RectangularDefinition.YSpacing.NCopies;
            NXOpen.Expression expression10 = patternFeatureBuilder1.PatternService.RectangularDefinition.YSpacing.SpanDistance;
            NXOpen.Expression expression111 = patternFeatureBuilder1.PatternService.RectangularDefinition.YSpacing.PitchDistance;
            NXOpen.Expression expression12 = patternFeatureBuilder1.PatternService.RectangularDefinition.XSpacing.NCopies;
            NXOpen.Expression expression13 = patternFeatureBuilder1.PatternService.RectangularDefinition.XSpacing.SpanDistance;
            NXOpen.Expression expression14 = patternFeatureBuilder1.PatternService.RectangularDefinition.XSpacing.PitchDistance;
            NXOpen.Expression expression15 = patternFeatureBuilder1.PatternService.RectangularDefinition.HorizontalRef.RotationAngle;
            NXOpen.Expression expression16 = patternFeatureBuilder1.PatternService.PatternFill.FillMargin;
            PatternFeature patternFeature20 = (PatternFeature)patternFeatureBuilder1.GetFeature();


            patternFeatureBuilder1.Destroy();
            
            ///
            /// Ausschnitt erzeugen
            ///
                       
            NXOpen.Features.ExtrudeBuilder extrudeBuilder1;
            extrudeBuilder1 = workPart.Features.CreateExtrudeBuilder(nullNXOpen_Features_Feature);

            NXOpen.Section section1;
            section1 = workPart.Sections.CreateSection(0.0094999999999999998, 0.01, 0.5);

            extrudeBuilder1.Section = section1;

            extrudeBuilder1.AllowSelfIntersectingSection(true);

            extrudeBuilder1.DistanceTolerance = 0.01;

            extrudeBuilder1.BooleanOperation.Type = NXOpen.GeometricUtilities.BooleanOperation.BooleanType.Create;

            NXOpen.Body[] targetBodies1 = new NXOpen.Body[1];
            NXOpen.Body nullNXOpen_Body = null;
            targetBodies1[0] = nullNXOpen_Body;
            extrudeBuilder1.BooleanOperation.SetTargetBodies(targetBodies1);

            extrudeBuilder1.Limits.StartExtend.Value.SetFormula("0");

            extrudeBuilder1.Limits.EndExtend.Value.SetFormula("500");

            extrudeBuilder1.BooleanOperation.Type = NXOpen.GeometricUtilities.BooleanOperation.BooleanType.Subtract;

            NXOpen.Body[] targetBodies2 = new NXOpen.Body[1];
            targetBodies2[0] = body1;
            extrudeBuilder1.BooleanOperation.SetTargetBodies(targetBodies2);

            extrudeBuilder1.Draft.FrontDraftAngle.SetFormula("2");

            extrudeBuilder1.Draft.BackDraftAngle.SetFormula("2");

            extrudeBuilder1.Offset.StartOffset.SetFormula("0");

            extrudeBuilder1.Offset.EndOffset.SetFormula("5");

            NXOpen.GeometricUtilities.SmartVolumeProfileBuilder smartVolumeProfileBuilder1;
            smartVolumeProfileBuilder1 = extrudeBuilder1.SmartVolumeProfile;

            smartVolumeProfileBuilder1.OpenProfileSmartVolumeOption = false;

            smartVolumeProfileBuilder1.CloseProfileRule = NXOpen.GeometricUtilities.SmartVolumeProfileBuilder.CloseProfileRuleType.Fci;


            section1.DistanceTolerance = 0.01;

            section1.ChainingTolerance = 0.0094999999999999998;

            section1.SetAllowedEntityTypes(NXOpen.Section.AllowTypes.OnlyCurves);

            NXOpen.Session.UndoMarkId markId2;
            markId2 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "section mark");

            NXOpen.Session.UndoMarkId markId3;
            markId3 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, null);

            NXOpen.Features.Feature[] features1 = new NXOpen.Features.Feature[1];
            features1[0] = patternFeature20;
            NXOpen.CurveFeatureRule curveFeatureRule1;
            curveFeatureRule1 = workPart.ScRuleFactory.CreateRuleCurveFeature(features1);

            section1.AllowSelfIntersection(true);

            NXOpen.SelectionIntentRule[] rules11 = new NXOpen.SelectionIntentRule[1];
            rules1[0] = curveFeatureRule1;
            //NXOpen.Point3d helpPoint1 = new NXOpen.Point3d(0.0, 0.0, 0.0);
            section1.AddToSection(rules1, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint1, NXOpen.Section.Mode.Create, false);

            theSession.DeleteUndoMark(markId3, null);

            //NXOpen.Point3d origin1 = new NXOpen.Point3d(-1.3500000000001919, 5.7999999999999927, 50.0);
            Vector3d vector1Extrude = vector0.Vector;
            NXOpen.Direction direction1extrude;
            direction1extrude = workPart.Directions.CreateDirection(systempoint, vector1Extrude);

            extrudeBuilder1.Direction = direction1;

            NXOpen.Unit unit2;
            unit2 = extrudeBuilder1.Offset.StartOffset.Units;



            theSession.DeleteUndoMark(markId2, null);

            NXOpen.Session.UndoMarkId markId4;
            markId4 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, "section mark");

            NXOpen.Session.UndoMarkId markId5;
            markId5 = theSession.SetUndoMark(NXOpen.Session.MarkVisibility.Invisible, null);

            NXOpen.Features.Feature[] features2 = new NXOpen.Features.Feature[1];
            features2[0] = sketchfeature20;
            NXOpen.CurveFeatureRule curveFeatureRule2;
            curveFeatureRule2 = workPart.ScRuleFactory.CreateRuleCurveFeature(features2);

            section1.AllowSelfIntersection(true);

            NXOpen.SelectionIntentRule[] rules2 = new NXOpen.SelectionIntentRule[1];
            rules2[0] = curveFeatureRule2;
            NXOpen.Point3d helpPoint2 = new NXOpen.Point3d(0.0, 0.0, 0.0);
            section1.AddToSection(rules2, nullNXOpen_NXObject, nullNXOpen_NXObject, nullNXOpen_NXObject, helpPoint2, NXOpen.Section.Mode.Create, false);

            theSession.DeleteUndoMark(markId4, null);

            //bool success1;
            //success1 = direction1.ReverseDirection();

            extrudeBuilder1.Direction = direction1extrude;
                       

            extrudeBuilder1.ParentFeatureInternal = false;

            NXOpen.Features.Feature ExtrudeFeature;
            ExtrudeFeature = extrudeBuilder1.CommitFeature();

            theSession.DeleteUndoMark(markId7, null);


            NXOpen.Expression expression24 = extrudeBuilder1.Limits.StartExtend.Value;
            NXOpen.Expression expression25 = extrudeBuilder1.Limits.EndExtend.Value;
            extrudeBuilder1.Destroy();
            if ( toggle0.Value == true)
            {
                NXOpen.STLCreator sTLCreator1;
                sTLCreator1 = theSession.DexManager.CreateStlCreator();

                sTLCreator1.AutoNormalGen = true;

                sTLCreator1.ChordalTol = 0.080000000000000002;

                sTLCreator1.AdjacencyTol = 0.080000000000000002;

                bool addedSTL1 = sTLCreator1.ExportSelectionBlock.Add(body1);                

                sTLCreator1.OutputFile = "C:\\Users\\bened\\Desktop\\Wabenmuster.stl";

                NXOpen.NXObject nXObjectSTL =  sTLCreator1.Commit();

                sTLCreator1.Destroy();
            }
            
            errorCode = apply_cb();
            //---- Enter your callback code here -----
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            errorCode = 1;
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return errorCode;
    }

    //------------------------------------------------------------------------------
    //Function Name: GetBlockProperties
    //Returns the propertylist of the specified BlockID
    //------------------------------------------------------------------------------
    public PropertyList GetBlockProperties(string blockID)
    {
        PropertyList plist = null;
        try
        {
            plist = theDialog.GetBlockProperties(blockID);
        }
        catch (Exception ex)
        {
            //---- Enter your exception handling code here -----
            theUI.NXMessageBox.Show("Block Styler", NXMessageBox.DialogType.Error, ex.ToString());
        }
        return plist;
    }

}
